{"version":3,"sources":["redux/contacts/contacts-selectors.js","redux/contacts/contacts-actions.js","Components/ContactsForm/ContactsForm.styled.js","Components/ContactsForm/ContactsForm.js","Components/ContactsListItem/ContactsListItem.styled.js","Components/ContactsListItem/ContactsListItem.js","Components/ContactsList/ContactsList.styled.js","Components/ContactsList/ContactsList.js","Components/Container/Container.styled.js","Components/Container/Container.js","Components/Filter/Filter.styled.js","Components/Filter/Filter.js","Components/App/App.js","redux/contacts/contacts-reducer.js","redux/store.js","constants/theme.js","index.js"],"names":["getContacts","state","contacts","items","getFilter","filter","getVisibleContacts","normalizedFilter","toLowerCase","name","includes","contactsActions","addContact","createAction","payload","number","id","shortid","generate","removeContact","filterChange","Form","styled","form","Label","label","props","theme","colors","primaryText","Input","input","FormBtn","button","secondaryText","black","ContactsForm","useState","setName","setNumber","useSelector","dispatch","useDispatch","onHandleChange","e","target","value","reset","onSubmit","preventDefault","find","contact","alert","type","pattern","title","onChange","required","ListItem","li","Item","span","DeleteBtn","ContactsListItem","remove","onClick","List","ul","ContactsList","map","SectionMain","section","SectionTitle","h2","Container","children","Filter","App","createReducer","actions","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","persistReducer","contactsReducer","devTools","process","persistor","persistStore","Object","freeze","white","green","red","blue","spacing","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"qPAAaA,EAAc,SAAAC,GAAK,OAAIA,EAAMC,SAASC,OAEtCC,EAAY,SAAAH,GAAK,OAAIA,EAAMC,SAASG,QAEpCC,EAAqB,SAAAL,GAChC,IAAMC,EAAWF,EAAYC,GAEvBM,EADSH,EAAUH,GACOO,cAEhC,OAAON,EAASG,QAAO,qBAAGI,KAAgBD,cAAcE,SAASH,O,wBCMpDI,EADS,CAAEC,WAXPC,YAAa,eAAe,kBAAuB,CACpEC,QAAS,CACPL,KAF2C,EAAGA,KAG9CM,OAH2C,EAASA,OAIpDC,GAAIC,IAAQC,gBAOsBC,cAHhBN,YAAa,kBAGkBO,aAFhCP,YAAa,yB,cCVrBQ,EAAOC,IAAOC,KAAV,6HAOJC,EAAQF,IAAOG,MAAV,gEAEP,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,eAG1BC,EAAQR,IAAOS,MAAV,yEAKLC,EAAUV,IAAOW,OAAV,+NAER,SAAAP,GAAK,0BAAiBA,EAAMC,MAAMC,OAAOM,kBAI1C,SAAAR,GAAK,gBAAOA,EAAMC,MAAMC,OAAOO,U,OCnB3B,SAASC,IACtB,MAAwBC,mBAAS,IAAjC,mBAAO5B,EAAP,KAAa6B,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOtB,EAAP,KAAewB,EAAf,KAEMrC,EAAWsC,YAAYxC,GACvByC,EAAWC,cAEXC,EAAiB,SAAAC,GACrB,MAAwBA,EAAEC,OAAlBpC,EAAR,EAAQA,KAAMqC,EAAd,EAAcA,MACd,OAAQrC,GACN,IAAK,OACH6B,EAAQQ,GACR,MAEF,IAAK,SACHP,EAAUO,KAoCVC,EAAQ,WACZT,EAAQ,IACRC,EAAU,KAGZ,OACE,eAAClB,EAAD,CAAM2B,SAlCe,SAAAJ,GAOrB,GANAA,EAAEK,iBAEmB/C,EAASgD,MAC5B,SAAAC,GAAO,OAAIA,EAAQ1C,KAAKD,gBAAkBC,EAAKD,iBAM/C,OAFAuC,SACAK,MAAM,GAAD,OAAI3C,EAAJ,4BAIPgC,EAAS9B,EAAgBC,WAAW,CAAEH,OAAMM,YAC5CgC,KAoBA,UACE,eAACvB,EAAD,mBAEE,cAACM,EAAD,CACEuB,KAAK,OACL5C,KAAK,OACL6C,QAAQ,yHACRC,MAAM,kcACNC,SAAUb,EACVG,MAAOrC,EACPgD,UAAQ,OAGZ,eAACjC,EAAD,oBAEE,cAACM,EAAD,CACEuB,KAAK,MACL5C,KAAK,SACL6C,QAAQ,yFACRC,MAAM,ifACNC,SAAUb,EACVG,MAAO/B,EACP0C,UAAQ,OAGZ,cAACzB,EAAD,CAASqB,KAAK,SAAd,oBCtFC,I,YAAMK,EAAWpC,IAAOqC,GAAV,+IAKN,SAAAjC,GAAK,0BAAiBA,EAAMC,MAAMC,OAAOM,kBAG3C0B,EAAOtC,IAAOuC,KAAV,yGAIN,SAAAnC,GAAK,gBAAOA,EAAMC,MAAMC,OAAOC,gBAG7BiC,EAAYxC,IAAOW,OAAV,sNAKX,SAAAP,GAAK,gBAAOA,EAAMC,MAAMC,OAAOO,UCnB7B4B,EAAmB,SAAC,GAA8B,IAA5BtD,EAA2B,EAA3BA,KAAMM,EAAqB,EAArBA,OAAQiD,EAAa,EAAbA,OAC/C,OACE,eAACN,EAAD,WACE,cAACE,EAAD,UAAOnD,IACP,cAACmD,EAAD,UAAO7C,IACP,cAAC+C,EAAD,CAAWT,KAAK,SAASY,QAASD,EAAlC,wBCNOE,EAAO5C,IAAO6C,GAAV,yDCIJC,EAAe,WAC1B,IAAMlE,EAAWsC,YAAYlC,GACvBmC,EAAWC,cAIjB,OACE,cAACwB,EAAD,UACGhE,EAASmE,KAAI,gBAAGrD,EAAH,EAAGA,GAAIP,EAAP,EAAOA,KAAMM,EAAb,EAAaA,OAAb,OACZ,cAAC,EAAD,CAEEC,GAAIA,EACJP,KAAMA,EACNM,OAAQA,EACRiD,OAAQ,kBAVM,SAAAhD,GAAE,OAAIyB,EAAS9B,EAAgBQ,cAAcH,IAU7CG,CAAcH,KAJvBA,SCdFsD,EAAchD,IAAOiD,QAAV,kIAKZ,SAAA7C,GAAK,0BAAiBA,EAAMC,MAAMC,OAAOM,kBAGxCsC,EAAelD,IAAOmD,GAAV,oLAMd,SAAA/C,GAAK,gBAAOA,EAAMC,MAAMC,OAAOC,gBCb7B6C,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,SAAUpB,EAAY,EAAZA,MACpC,OACE,eAACe,EAAD,WACE,cAACE,EAAD,UAAejB,IACdoB,MCLMnD,EAAQF,IAAOG,MAAV,gEAEP,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,OAAOC,eAG1BC,EAAQR,IAAOS,MAAV,yECFL6C,EAAS,WACpB,IAAM9B,EAAQN,YAAYpC,GACpBqC,EAAWC,cAEjB,OACE,eAAC,EAAD,qBAEE,cAAC,EAAD,CACEW,KAAK,OACLP,MAAOA,EACPU,SAAU,SAAAZ,GAAC,OAAIH,EAAS9B,EAAgBS,aAAawB,EAAEC,OAAOC,eCVzD+B,EAAM,WACjB,OACE,qCACE,cAAC,EAAD,CAAWtB,MAAM,YAAjB,SACE,cAACnB,EAAD,MAGF,eAAC,EAAD,CAAWmB,MAAM,WAAjB,UACE,cAAC,EAAD,IACA,cAAC,EAAD,W,uBCHFpD,GAAQ2E,YAAc,GAAD,OAPN,CACnB,CAAE9D,GAAI,OAAQP,KAAM,gBAAiBM,OAAQ,aAC7C,CAAEC,GAAI,OAAQP,KAAM,iBAAkBM,OAAQ,aAC9C,CAAEC,GAAI,OAAQP,KAAM,gBAAiBM,OAAQ,aAC7C,CAAEC,GAAI,OAAQP,KAAM,iBAAkBM,OAAQ,gBAGrB,mBACxBgE,EAAQnE,YAAa,SAACX,EAAD,OAAUa,EAAV,EAAUA,QAAV,4BAA4Bb,GAA5B,CAAmCa,OADhC,cAExBiE,EAAQ5D,eAAgB,SAAClB,EAAD,OAAUa,EAAV,EAAUA,QAAV,OAAwBb,EAAMI,QAAO,qBAAGW,KAAgBF,QAFxD,IAKrBT,GAASyE,YAAc,GAAD,eACzBC,EAAQ3D,cAAe,SAAC4D,EAAD,YAAMlE,YAGjBmE,eAAgB,CAC7B9E,SACAE,Y,qCCPI6E,GAAwB,CAC5BC,IAAK,WACLC,Q,QAAAA,EACAC,UAAW,CAAC,WAGRC,GAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,KAAOC,KAAWC,KAAOC,KAASC,KAAOC,UAHhD,CAMdC,OAGWC,GAAQC,YAAe,CAClCC,QAAS,CACPjG,SAAUkG,aAAelB,GAAuBmB,KAElDf,cACAgB,UAAUC,IAGCC,GAAYC,aAAaR,I,uBCtCzBtE,GAAQ+E,OAAOC,OAAO,CACjC/E,OAAQ,CACNgF,MAAO,UACPzE,MAAO,UACP0E,MAAO,UACPC,IAAK,UACLC,KAAM,UACNlF,YAAa,UACbK,cAAe,WAEjB8E,QAAS,SAAAlE,GAAK,gBAAO,EAAIA,EAAX,SCChBmE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUlB,MAAOA,GAAjB,SACE,cAAC,IAAD,CAAamB,QAAS,KAAMZ,UAAWA,GAAvC,SACE,cAAC,KAAD,CAAe7E,MAAOA,GAAtB,SACE,cAAC,EAAD,YAKR0F,SAASC,eAAe,W","file":"static/js/main.401e9cb6.chunk.js","sourcesContent":["export const getContacts = state => state.contacts.items;\n\nexport const getFilter = state => state.contacts.filter;\n\nexport const getVisibleContacts = state => {\n  const contacts = getContacts(state);\n  const filter = getFilter(state);\n  const normalizedFilter = filter.toLowerCase();\n\n  return contacts.filter(({ name }) => name.toLowerCase().includes(normalizedFilter));\n};\n","import { createAction } from '@reduxjs/toolkit';\nimport shortid from 'shortid';\n\nconst addContact = createAction('contact/add', ({ name, number }) => ({\n  payload: {\n    name,\n    number,\n    id: shortid.generate(),\n  },\n}));\n\nconst removeContact = createAction('contact/remove');\nconst filterChange = createAction('contact/filterChange');\n\nconst contactsActions = { addContact, removeContact, filterChange };\nexport default contactsActions;\n","import styled from '@emotion/styled';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const Label = styled.label`\n  font-weight: 700;\n  color: ${props => props.theme.colors.primaryText};\n`;\n\nexport const Input = styled.input`\n  border-radius: 5px;\n  margin-left: 10px;\n`;\n\nexport const FormBtn = styled.button`\n  margin: 10px;\n  border: ${props => `1px solid ${props.theme.colors.secondaryText}`};\n  border-radius: 23px;\n  cursor: pointer;\n  padding: 12px 24px;\n  color: ${props => `${props.theme.colors.black}`};\n  transition: all 250ms ease-in;\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n","import React, { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contacts-selectors';\nimport contactsActions from 'redux/contacts/contacts-actions';\nimport { Form, FormBtn, Input, Label } from './ContactsForm.styled';\n\nexport default function ContactsForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(getContacts);\n  const dispatch = useDispatch();\n\n  const onHandleChange = e => {\n    const { name, value } = e.target;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const onHandleSubmit = e => {\n    e.preventDefault();\n\n    const contactCheck = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\n    );\n\n    if (contactCheck) {\n      reset();\n      alert(`${name} is already in contacts`);\n      return;\n    }\n\n    dispatch(contactsActions.addContact({ name, number }));\n    reset();\n  };\n\n  // const onHandleSubmit = e => {\n  //   e.preventDefault();\n  //   const newContact = {\n  //     id: shId,\n  //     name,\n  //     number,\n  //   };\n  //   addContact(newContact);\n  //   reset();\n  // };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form onSubmit={onHandleSubmit}>\n      <Label>\n        Name:\n        <Input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          onChange={onHandleChange}\n          value={name}\n          required\n        />\n      </Label>\n      <Label>\n        Phone:\n        <Input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер должен состоять цифр, и может содержать пробелы, тире, круглые скобки и может начинаться с +.\"\n          onChange={onHandleChange}\n          value={number}\n          required\n        />\n      </Label>\n      <FormBtn type=\"submit\">Add</FormBtn>\n    </Form>\n  );\n}\n","import styled from '@emotion/styled';\n\nexport const ListItem = styled.li`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  padding: 5px;\n  /* border: ${props => `1px solid ${props.theme.colors.secondaryText}`}; */\n`;\n\nexport const Item = styled.span`\n  font-weight: 400;\n  font-size: 12px;\n  line-height: 1.2;\n  color: ${props => `${props.theme.colors.primaryText}`};\n`;\n\nexport const DeleteBtn = styled.button`\n  margin: 10px;\n  border: 1px solid grey;\n  border-radius: 23px;\n  padding: 12px 24px;\n  color: ${props => `${props.theme.colors.black}`};\n  transition: all 250ms ease-in;\n  &:hover {\n    transform: scale(1.1);\n  }\n`;\n","import { DeleteBtn, Item, ListItem } from './ContactsListItem.styled';\nimport PropTypes from 'prop-types';\n\nexport const ContactsListItem = ({ name, number, remove }) => {\n  return (\n    <ListItem>\n      <Item>{name}</Item>\n      <Item>{number}</Item>\n      <DeleteBtn type=\"button\" onClick={remove}>\n        remove\n      </DeleteBtn>\n    </ListItem>\n  );\n};\n\nContactsListItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  remove: PropTypes.func.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const List = styled.ul`\n  padding: 0;\n  margin: 0;\n`;\n","import { ContactsListItem } from 'Components/ContactsListItem/ContactsListItem';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { List } from './ContactsList.styled';\nimport { getVisibleContacts } from 'redux/contacts/contacts-selectors';\nimport contactsActions from 'redux/contacts/contacts-actions';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(getVisibleContacts);\n  const dispatch = useDispatch();\n\n  const removeContact = id => dispatch(contactsActions.removeContact(id));\n\n  return (\n    <List>\n      {contacts.map(({ id, name, number }) => (\n        <ContactsListItem\n          key={id}\n          id={id}\n          name={name}\n          number={number}\n          remove={() => removeContact(id)}\n        />\n      ))}\n    </List>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const SectionMain = styled.section`\n  margin: 0 auto;\n  align-items: center;\n  text-align: center;\n  padding: 10vh 0;\n  border: ${props => `1px solid ${props.theme.colors.secondaryText}`};\n`;\n\nexport const SectionTitle = styled.h2`\n  padding: 5px;\n  font-weight: 900;\n  font-size: 16px;\n  line-height: 1.36;\n  letter-spacing: 0.06em;\n  color: ${props => `${props.theme.colors.primaryText}`};\n  text-transform: uppercase;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionMain, SectionTitle } from './Container.styled';\n\nexport const Container = ({ children, title }) => {\n  return (\n    <SectionMain>\n      <SectionTitle>{title}</SectionTitle>\n      {children}\n    </SectionMain>\n  );\n};\n\nContainer.propTypes = {\n  title: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Label = styled.label`\n  font-weight: 700;\n  color: ${props => props.theme.colors.primaryText};\n`;\n\nexport const Input = styled.input`\n  border-radius: 5px;\n  margin-left: 10px;\n`;\n","import { Input, Label } from './Filter.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilter } from 'redux/contacts/contacts-selectors';\nimport contactsActions from 'redux/contacts/contacts-actions';\n\nexport const Filter = () => {\n  const value = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <Label>\n      Filter:\n      <Input\n        type=\"text\"\n        value={value}\n        onChange={e => dispatch(contactsActions.filterChange(e.target.value))}\n      />\n    </Label>\n  );\n};\n","import ContactsForm from 'Components/ContactsForm/ContactsForm';\nimport { ContactsList } from 'Components/ContactsList/ContactsList';\nimport { Container } from 'Components/Container/Container';\nimport { Filter } from 'Components/Filter/Filter';\n\nexport const App = () => {\n  return (\n    <>\n      <Container title=\"Phonebook\">\n        <ContactsForm />\n      </Container>\n\n      <Container title=\"Contacts\">\n        <Filter />\n        <ContactsList />\n      </Container>\n    </>\n  );\n};\n","import { createReducer } from '@reduxjs/toolkit';\nimport { combineReducers } from 'redux';\nimport actions from './contacts-actions';\n\nconst initialState = [\n  { id: 'id-1', name: 'Rosie Simpson', number: '459-12-56' },\n  { id: 'id-2', name: 'Hermione Kline', number: '443-89-12' },\n  { id: 'id-3', name: 'Eden Clements', number: '645-17-79' },\n  { id: 'id-4', name: 'Annie Copeland', number: '227-91-26' },\n];\n\nconst items = createReducer([...initialState], {\n  [actions.addContact]: (state, { payload }) => [...state, payload],\n  [actions.removeContact]: (state, { payload }) => state.filter(({ id }) => id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.filterChange]: (_, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\nimport logger from 'redux-logger';\nimport {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst middleware = [\n  ...getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  logger,\n];\n\nexport const store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware,\n  devTools: process.env.NODE_ENV === 'development',\n});\n\nexport const persistor = persistStore(store);\n","export const theme = Object.freeze({\n  colors: {\n    white: '#ffffff',\n    black: '#010101',\n    green: '#4caf50',\n    red: '#f44336',\n    blue: '#2196f3',\n    primaryText: '#212121',\n    secondaryText: '#757575',\n  },\n  spacing: value => `${4 * value}px`,\n});\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { App } from './Components/App/App';\nimport { store, persistor } from './redux/store';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport { ThemeProvider } from '@emotion/react';\nimport { theme } from 'constants/theme';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <ThemeProvider theme={theme}>\n          <App />\n        </ThemeProvider>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}